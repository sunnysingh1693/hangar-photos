{"version":3,"sources":["svg/hangar_logo_large.svg","components/Search/Search.jsx","components/Start/Start.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","Component","Start","id","to","src","homeLogo","alt","className","App","path","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,+C,oMCkK5BC,E,uKAJX,OAAO,sC,GArJUC,a,yBCmBNC,E,uKAbX,OACE,yBACEC,GAAG,gBAGH,kBAAC,IAAD,CAAMC,GAAG,sBACP,yBAAKC,IAAKC,IAAUC,IAAI,oBAAoBC,UAAU,oB,GAhB5CP,aCaLQ,E,uKAXX,OACE,yBAAKD,UAAU,uBACb,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAOE,KAAMC,oBACb,kBAAC,EAAD,CAAQD,KAAK,4B,GANLT,aCOEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.aac903e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hangar_logo_large.5f1cfe60.svg\";","import React, { Component } from \"react\";\n// import \"./Search.scss\";\n// import { Link } from \"@reach/router\";\n// import Footer from \"../Footer/Footer\";\n// import Results from \"../Results/Results\";\n// import Input from \"../Input/Input\";\n// import noresults from \"../../svg/noresults.png\";\n// import goBack from \"../../svg/arrow.svg\";\n\nclass Search extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     error: null,\n  //     isLoaded: false,\n  //     items: [],\n  //     baseUrl:\n  //       \"https://cors-anywhere.herokuapp.com/http://localhost:4001/items\",\n  //     searchQuery: \"\",\n  //     isInActive: null,\n  //     itemDescription: \"\",\n  //     searchFor: \"\",\n  //   };\n\n  //   this.handleChange = this.handleChange.bind(this);\n  //   this.handleSubmit = this.handleSubmit.bind(this);\n  // }\n\n  // getData(searchQuery) {\n  //   console.log(\"Requesting API...\");\n  //   fetch(searchQuery)\n  //     .then((res) => res.json())\n  //     .then(\n  //       (result) => {\n  //         this.setState({\n  //           isLoaded: true,\n  //           items: result.map((item) => ({ ...item, isDescription: false })),\n  //         });\n  //         if (result.length === 0) {\n  //           // console.log(\"empty\");\n  //         }\n  //       },\n  //       (error) => {\n  //         this.setState({\n  //           isLoaded: true,\n  //           error,\n  //         });\n  //       }\n  //     );\n  // }\n\n  // componentDidMount() {\n  //   // this.getData(this.state.baseUrl);\n  // }\n\n  // handleChange = (event) => {\n  //   this.setState({ searchQuery: event.target.value });\n  // };\n\n  // handleSubmit = (event) => {\n  //   event.preventDefault();\n\n  //   this.setState({ searchFor: this.state.searchQuery });\n  //   let searchUrl = `${this.state.baseUrl}?q=${encodeURI(\n  //     this.state.searchQuery\n  //   )}`;\n  //   console.log(searchUrl);\n\n  //   this.getData(searchUrl);\n  // };\n\n  // showDescription = (id) => {\n  //   this.setState({\n  //     isInActive: false,\n  //     // eslint-disable-next-line no-dupe-keys\n  //     isInActive: !this.state.isInActive,\n  //   });\n\n  //   const items = this.state.items.map((item) => {\n  //     if (item.id === id) {\n  //       return { ...item, isDescription: !this.state.isInActive };\n  //     } else {\n  //       return { ...item, isDescription: false };\n  //     }\n  //   });\n\n  //   this.setState({\n  //     items: items,\n  //   });\n  // };\n\n  // render() {\n  //   let searchWrapperBg = {\n  //     background: `url('${\n  //       process.env.PUBLIC_URL + \"/\"\n  //     }images/bgs/bg-start.jpg') no-repeat`,\n  //     backgroundSize: \"auto\",\n  //     backgroundPositionX: \"right\",\n  //     backgroundPositionY: \"bottom\",\n  //   };\n  //   const {\n  //     error,\n  //     isLoaded,\n  //     items,\n  //     searchQuery,\n  //     searchFor,\n  //     isInActive,\n  //   } = this.state;\n  //   if (error) {\n  //     return <div>Error: {error.message}</div>;\n  //   } else if (!isLoaded) {\n  //     return (\n  //       <div id=\"loader\">\n  //         <img\n  //           src=\"https://tinyurl.com/y633wao2\"\n  //           alt=\"loading ...\"\n  //           className=\"img-fluid\"\n  //         />\n  //       </div>\n  //     );\n  //   } else {\n  //     return (\n  //       <div\n  //         id=\"searchWrapper\"\n  //         className=\"row justify-content-center m-0\"\n  //         style={{ searchWrapperBg }}\n  //       >\n  //         <div className=\"contentWrapper\">\n  //           <Link to={process.env.PUBLIC_URL + \"/\"}>\n  //             <div id=\"goBack\">\n  //               <img src={goBack} alt=\"\" />\n  //             </div>\n  //           </Link>\n  //           <Input\n  //             onSubmit={this.handleSubmit}\n  //             onChange={this.handleChange}\n  //             searchQuery={searchQuery}\n  //           />\n  //           {items.length === 0 ? (\n  //             <div id=\"loader\">\n  //               <img src={noresults} alt=\"loading ...\" className=\"img-fluid\" />\n  //             </div>\n  //           ) : (\n  //             <Results\n  //               searchFor={searchFor}\n  //               items={items}\n  //               isInActive={isInActive}\n  //               showDescription={this.showDescription}\n  //             />\n  //           )}\n  //           <Footer />\n  //         </div>\n  //       </div>\n  //     );\n  //   }\n  // }\n\n  render() {\n    return <h1>Hi</h1>;\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport \"./Start.scss\";\nimport { Link } from \"@reach/router\";\nimport homeLogo from \"../../svg/hangar_logo_large.svg\";\n\nclass Start extends Component {\n  render() {\n    // let startWrapperBgCss = {\n    //   background: `url('${\n    //     process.env.PUBLIC_URL + \"/\"\n    //   }images/bgs/bg-start.jpg') no-repeat`,\n    //   backgroundSize: \"80%\",\n    //   backgroundPositionX: \"left\",\n    //   backgroundPositionY: \"bottom\",\n    // };\n    return (\n      <div\n        id=\"startWrapper\"\n        // style={startWrapperBgCss}\n      >\n        <Link to=\"/components/Search\">\n          <img src={homeLogo} alt=\"hangar_logo_large\" className=\"img-fluid\" />\n        </Link>\n      </div>\n    );\n  }\n}\n\nexport default Start;\n","import React, { Component } from 'react';\nimport { Router } from '@reach/router'\nimport Search from \"./components/Search/Search\";\nimport Start from \"./components/Start/Start\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container-fluid p-0\">\n        <Router>\n          <Start path={process.env.PUBLIC_URL + '/'} />\n          <Search path=\"components/Search\" />\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}